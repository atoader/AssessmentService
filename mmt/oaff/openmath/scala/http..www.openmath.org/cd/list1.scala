//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait list1 extends TheoryScala {
  def list1_list(xs1: List[Term]): Term

  def list1_map(x1: Term, x2: Term): Term

  def list1_suchthat(): Term

}

object list1 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "list1"

  object list extends ConstantScala {
    val parent = _path
    val name = "list"
    def apply(xs1: List[Term]) = OMA(OMID(this.path), xs1)
    def unapply(t: Term): Option[List[Term]] = t match {
      case OMA(OMID(this.path), xs1) => Some(xs1)
      case _ => None
    }
  }


  object map extends ConstantScala {
    val parent = _path
    val name = "map"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object suchthat extends ConstantScala {
    val parent = _path
    val name = "suchthat"
  }


}

