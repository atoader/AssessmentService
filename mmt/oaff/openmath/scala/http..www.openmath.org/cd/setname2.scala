//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait setname2 extends TheoryScala {
  def setname2_A(): Term

  def setname2_Boolean(): Term

  def setname2_Zm(x1: Term): Term

  def setname2_GFp(x1: Term): Term

  def setname2_GFpn(x1: Term, x2: Term): Term

  def setname2_QuotientField(x1: Term): Term

  def setname2_H(): Term

}

object setname2 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "setname2"

  object A extends ConstantScala {
    val parent = _path
    val name = "A"
  }


  object Boolean extends ConstantScala {
    val parent = _path
    val name = "Boolean"
  }


  object Zm extends ConstantScala {
    val parent = _path
    val name = "Zm"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object GFp extends ConstantScala {
    val parent = _path
    val name = "GFp"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object GFpn extends ConstantScala {
    val parent = _path
    val name = "GFpn"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object QuotientField extends ConstantScala {
    val parent = _path
    val name = "QuotientField"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object H extends ConstantScala {
    val parent = _path
    val name = "H"
  }


}

