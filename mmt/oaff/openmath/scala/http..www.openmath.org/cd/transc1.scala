//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait transc1 extends TheoryScala {
  def transc1_arccos(x1: Term): Term

  def transc1_arccosh(x1: Term): Term

  def transc1_arccot(x1: Term): Term

  def transc1_arccoth(x1: Term): Term

  def transc1_arccsc(x1: Term): Term

  def transc1_arccsch(x1: Term): Term

  def transc1_arcsec(x1: Term): Term

  def transc1_arcsech(x1: Term): Term

  def transc1_arcsin(x1: Term): Term

  def transc1_arcsinh(x1: Term): Term

  def transc1_arctan(x1: Term): Term

  def transc1_arctanh(x1: Term): Term

  def transc1_cos(x1: Term): Term

  def transc1_cosh(x1: Term): Term

  def transc1_cot(x1: Term): Term

  def transc1_coth(x1: Term): Term

  def transc1_csc(x1: Term): Term

  def transc1_csch(x1: Term): Term

  def transc1_exp(x1: Term): Term

  def transc1_ln(x1: Term): Term

  def transc1_log(x1: Term, x2: Term): Term

  def transc1_sec(x1: Term): Term

  def transc1_sech(x1: Term): Term

  def transc1_sin(x1: Term): Term

  def transc1_sinh(x1: Term): Term

  def transc1_tan(x1: Term): Term

  def transc1_tanh(x1: Term): Term

}

object transc1 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "transc1"

  object arccos extends ConstantScala {
    val parent = _path
    val name = "arccos"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arccosh extends ConstantScala {
    val parent = _path
    val name = "arccosh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arccot extends ConstantScala {
    val parent = _path
    val name = "arccot"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arccoth extends ConstantScala {
    val parent = _path
    val name = "arccoth"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arccsc extends ConstantScala {
    val parent = _path
    val name = "arccsc"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arccsch extends ConstantScala {
    val parent = _path
    val name = "arccsch"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arcsec extends ConstantScala {
    val parent = _path
    val name = "arcsec"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arcsech extends ConstantScala {
    val parent = _path
    val name = "arcsech"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arcsin extends ConstantScala {
    val parent = _path
    val name = "arcsin"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arcsinh extends ConstantScala {
    val parent = _path
    val name = "arcsinh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arctan extends ConstantScala {
    val parent = _path
    val name = "arctan"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object arctanh extends ConstantScala {
    val parent = _path
    val name = "arctanh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object cos extends ConstantScala {
    val parent = _path
    val name = "cos"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object cosh extends ConstantScala {
    val parent = _path
    val name = "cosh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object cot extends ConstantScala {
    val parent = _path
    val name = "cot"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object coth extends ConstantScala {
    val parent = _path
    val name = "coth"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object csc extends ConstantScala {
    val parent = _path
    val name = "csc"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object csch extends ConstantScala {
    val parent = _path
    val name = "csch"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object exp extends ConstantScala {
    val parent = _path
    val name = "exp"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object ln extends ConstantScala {
    val parent = _path
    val name = "ln"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object log extends ConstantScala {
    val parent = _path
    val name = "log"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object sec extends ConstantScala {
    val parent = _path
    val name = "sec"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object sech extends ConstantScala {
    val parent = _path
    val name = "sech"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object sin extends ConstantScala {
    val parent = _path
    val name = "sin"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object sinh extends ConstantScala {
    val parent = _path
    val name = "sinh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object tan extends ConstantScala {
    val parent = _path
    val name = "tan"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object tanh extends ConstantScala {
    val parent = _path
    val name = "tanh"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


}

