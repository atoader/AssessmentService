//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait linalg4 extends TheoryScala {
  def linalg4_characteristic_eqn(): Term

  def linalg4_columncount(x1: Term): Term

  def linalg4_eigenvalue(): Term

  def linalg4_eigenvector(): Term

  def linalg4_rank(): Term

  def linalg4_rowcount(x1: Term): Term

  def linalg4_size(x1: Term): Term

}

object linalg4 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "linalg4"

  object characteristic_eqn extends ConstantScala {
    val parent = _path
    val name = "characteristic_eqn"
  }


  object columncount extends ConstantScala {
    val parent = _path
    val name = "columncount"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object eigenvalue extends ConstantScala {
    val parent = _path
    val name = "eigenvalue"
  }


  object eigenvector extends ConstantScala {
    val parent = _path
    val name = "eigenvector"
  }


  object rank extends ConstantScala {
    val parent = _path
    val name = "rank"
  }


  object rowcount extends ConstantScala {
    val parent = _path
    val name = "rowcount"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object size extends ConstantScala {
    val parent = _path
    val name = "size"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


}

