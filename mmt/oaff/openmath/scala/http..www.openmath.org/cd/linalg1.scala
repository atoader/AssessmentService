//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait linalg1 extends TheoryScala {
  def linalg1_determinant(x1: Term): Term

  def linalg1_matrix_selector(x1: Term, x2: Term, x3: Term): Term

  def linalg1_outerproduct(x1: Term, x2: Term): Term

  def linalg1_scalarproduct(x1: Term, x2: Term): Term

  def linalg1_transpose(x1: Term): Term

  def linalg1_vector_selector(x1: Term, x2: Term): Term

  def linalg1_vectorproduct(x1: Term, x2: Term): Term

}

object linalg1 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "linalg1"

  object determinant extends ConstantScala {
    val parent = _path
    val name = "determinant"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object matrix_selector extends ConstantScala {
    val parent = _path
    val name = "matrix_selector"
    def apply(x1: Term, x2: Term, x3: Term) = OMA(OMID(this.path), x1 :: x2 :: x3:: Nil)
    def unapply(t: Term): Option[(Term, Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2 :: x3:: Nil) => Some((x1, x2, x3))
      case _ => None
    }
  }


  object outerproduct extends ConstantScala {
    val parent = _path
    val name = "outerproduct"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object scalarproduct extends ConstantScala {
    val parent = _path
    val name = "scalarproduct"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object transpose extends ConstantScala {
    val parent = _path
    val name = "transpose"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object vector_selector extends ConstantScala {
    val parent = _path
    val name = "vector_selector"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object vectorproduct extends ConstantScala {
    val parent = _path
    val name = "vectorproduct"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


}

