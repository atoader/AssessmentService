//Source file generated by the Universal OpenMath Machine

package org.openmath.www.cd
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait logic1 extends TheoryScala {
  def logic1_false(): Term

  def logic1_true(): Term

  def logic1_equivalent(x1: Term, x2: Term): Term

  def logic1_implies(x1: Term, x2: Term): Term

  def logic1_not(x1: Term): Term

  def logic1_and(xs1: List[Term]): Term

  def logic1_or(xs1: List[Term]): Term

  def logic1_xor(xs1: List[Term]): Term

}

object logic1 extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "www.openmath.org") / "cd")
  val _path = _base ? "logic1"

  object `false` extends ConstantScala {
    val parent = _path
    val name = "false"
  }


  object `true` extends ConstantScala {
    val parent = _path
    val name = "true"
  }


  object equivalent extends ConstantScala {
    val parent = _path
    val name = "equivalent"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object implies extends ConstantScala {
    val parent = _path
    val name = "implies"
    def apply(x1: Term, x2: Term) = OMA(OMID(this.path), x1 :: x2:: Nil)
    def unapply(t: Term): Option[(Term, Term)] = t match {
      case OMA(OMID(this.path), x1 :: x2:: Nil) => Some((x1, x2))
      case _ => None
    }
  }


  object not extends ConstantScala {
    val parent = _path
    val name = "not"
    def apply(x1: Term) = OMA(OMID(this.path), x1:: Nil)
    def unapply(t: Term): Option[Term] = t match {
      case OMA(OMID(this.path), x1:: Nil) => Some(x1)
      case _ => None
    }
  }


  object and extends ConstantScala {
    val parent = _path
    val name = "and"
    def apply(xs1: List[Term]) = OMA(OMID(this.path), xs1)
    def unapply(t: Term): Option[List[Term]] = t match {
      case OMA(OMID(this.path), xs1) => Some(xs1)
      case _ => None
    }
  }


  object or extends ConstantScala {
    val parent = _path
    val name = "or"
    def apply(xs1: List[Term]) = OMA(OMID(this.path), xs1)
    def unapply(t: Term): Option[List[Term]] = t match {
      case OMA(OMID(this.path), xs1) => Some(xs1)
      case _ => None
    }
  }


  object xor extends ConstantScala {
    val parent = _path
    val name = "xor"
    def apply(xs1: List[Term]) = OMA(OMID(this.path), xs1)
    def unapply(t: Term): Option[List[Term]] = t match {
      case OMA(OMID(this.path), xs1) => Some(xs1)
      case _ => None
    }
  }


}

