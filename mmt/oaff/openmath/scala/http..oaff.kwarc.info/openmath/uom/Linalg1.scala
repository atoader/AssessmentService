//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.uom
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

import org.openmath.www.cd._

import linalg1._

trait Linalg1 extends ViewScala with linalg1 {
  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?determinant
  def linalg1_determinant(x1: Term) : Term = {
    throw Unimplemented("linalg1_determinant")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?determinant

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?matrix_selector
  def linalg1_matrix_selector(row: Term, col: Term, mat: Term) : Term = {
    (row, mat) match {
      case (OMI(r), linalg2.matrix(m)) => vector_selector(col, Collections.nth(r.toInt, m)) 
      case _ => matrix_selector(row, col, mat)
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?matrix_selector

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?outerproduct
  def linalg1_outerproduct(a: Term, b: Term) : Term = {
    arith1.times(transpose(a), b)
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?outerproduct

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?scalarproduct
  def linalg1_scalarproduct(a: Term, b: Term) : Term = {
    (a, b) match {
      case (linalg2.vector(v1), linalg2.vector(v2)) =>
        if (v1.length == v2.length)
          arith1.plus(v1.zip(v2).map(x => arith1.times(x._1, x._2)))
        else throw UOMException("linalg1.scalarproduct: vectors have unequal lengths")	
      case _ => scalarproduct(a, b)
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?scalarproduct

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?transpose
  def linalg1_transpose(a: Term) : Term = {
    a match {
      case linalg2.matrix(_) => Linalgs.transposeMatrix(a)
      case linalg2.vector(v) => linalg2.matrix(v.map(linalg2.vector(_)))
      case _ => transpose(a) 
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?transpose

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?vector_selector
  def linalg1_vector_selector(a: Term, b: Term) : Term = {
    (a, b) match {
      case (OMI(i), linalg2.vector(v)) => Collections.nth(i.toInt, v) 
      case _ => vector_selector(a, b)
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?vector_selector

  // UOM start http://oaff.kwarc.info/openmath/uom?Linalg1?vectorproduct
  def linalg1_vectorproduct(a: Term, b: Term) : Term = {
    (a, b) match {
      case (linalg2.vector(List(a1, a2, a3)), linalg2.vector(List(b1, b2, b3))) =>
        linalg2.vector(List(arith1.minus(arith1.times(a2,b3), arith1.times(a3,b2)),
            arith1.minus(arith1.times(a3,b1), arith1.times(a1,b3)),
            arith1.minus(arith1.times(a1,b2), arith1.times(a2,b1))))
      case _ => vectorproduct(a, b)
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?Linalg1?vectorproduct

  declares(Implementation.A(linalg1.determinant.path)(linalg1_determinant _))
  declares(Implementation.AAA(linalg1.matrix_selector.path)(linalg1_matrix_selector _))
  declares(Implementation.AA(linalg1.outerproduct.path)(linalg1_outerproduct _))
  declares(Implementation.AA(linalg1.scalarproduct.path)(linalg1_scalarproduct _))
  declares(Implementation.A(linalg1.transpose.path)(linalg1_transpose _))
  declares(Implementation.AA(linalg1.vector_selector.path)(linalg1_vector_selector _))
  declares(Implementation.AA(linalg1.vectorproduct.path)(linalg1_vectorproduct _))

}

object Linalg1 extends Linalg1

