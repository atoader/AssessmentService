//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.uom
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

import org.openmath.www.cd._

import arith1._

trait PolyuArith extends ViewScala with arith1 {
  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?plus
  def arith1_plus(args: List[Term]) : Term = {
    var polys: List[Term] = Nil
    var restArgs: List[Term] = Nil
    
    args foreach {
      case polyu.polynomial_u(p, _) => polys ::= p
      case p@polyu.poly_u_rep(_) => polys :: p
      case a => restArgs ::= a
    }
    if (polys == Nil) {
      plus(restArgs)
    } else {
      var sum = Polys.addPolys(polys)
      if (restArgs == Nil) {
        sum
      } else {
        plus(sum :: restArgs)
      }
    }
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?plus

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?minus
  def arith1_minus(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_minus")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?minus

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?times
  def arith1_times(xs1: List[Term]) : Term = {
    throw Unimplemented("arith1_times")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?times

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?divide
  def arith1_divide(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_divide")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?divide

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?power
  def arith1_power(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_power")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?power

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?root
  def arith1_root(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_root")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?root

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?abs
  def arith1_abs(x1: Term) : Term = {
    throw Unimplemented("arith1_abs")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?abs

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?unary_minus
  def arith1_unary_minus(x1: Term) : Term = {
    throw Unimplemented("arith1_unary_minus")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?unary_minus

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?gcd
  def arith1_gcd(xs1: List[Term]) : Term = {
    throw Unimplemented("arith1_gcd")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?gcd

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?lcm
  def arith1_lcm(xs1: List[Term]) : Term = {
    throw Unimplemented("arith1_lcm")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?lcm

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?product
  def arith1_product(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_product")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?product

  // UOM start http://oaff.kwarc.info/openmath/uom?PolyuArith?sum
  def arith1_sum(x1: Term, x2: Term) : Term = {
    throw Unimplemented("arith1_sum")
  }
  // UOM end http://oaff.kwarc.info/openmath/uom?PolyuArith?sum

  declares(Implementation.S(arith1.plus.path)(arith1_plus _))
  declares(Implementation.AA(arith1.minus.path)(arith1_minus _))
  declares(Implementation.S(arith1.times.path)(arith1_times _))
  declares(Implementation.AA(arith1.divide.path)(arith1_divide _))
  declares(Implementation.AA(arith1.power.path)(arith1_power _))
  declares(Implementation.AA(arith1.root.path)(arith1_root _))
  declares(Implementation.A(arith1.abs.path)(arith1_abs _))
  declares(Implementation.A(arith1.unary_minus.path)(arith1_unary_minus _))
  declares(Implementation.S(arith1.gcd.path)(arith1_gcd _))
  declares(Implementation.S(arith1.lcm.path)(arith1_lcm _))
  declares(Implementation.AA(arith1.product.path)(arith1_product _))
  declares(Implementation.AA(arith1.sum.path)(arith1_sum _))

}

object PolyuArith extends PolyuArith

