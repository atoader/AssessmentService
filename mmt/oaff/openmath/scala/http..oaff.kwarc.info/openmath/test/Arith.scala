//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.test
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait Arith extends TheoryScala with org.openmath.www.cd.arith1 with org.openmath.www.cd.nums1 with org.openmath.www.cd.relation1 with org.openmath.www.cd.logic1 {
  val Arith_plusTest = _assert("Arith_plusTest", _ => relation1_eq(arith1_plus(List(OMI(2), OMI(3), OMI(4))), OMI(9)), _ == logic1_true())

  val Arith_minusTest = _assert("Arith_minusTest", _ => relation1_eq(arith1_minus(OMI(5), OMI(2)), OMI(3)), _ == logic1_true())

  val Arith_timesTest = _assert("Arith_timesTest", _ => relation1_eq(arith1_times(List(OMI(3), OMI(4))), OMI(12)), _ == logic1_true())

  val Arith_divideTest = _assert("Arith_divideTest", _ => relation1_eq(arith1_divide(OMI(4), OMI(2)), OMI(2)), _ == logic1_true())

  val Arith_powerTest = _assert("Arith_powerTest", _ => relation1_eq(arith1_power(OMI(4), OMI(2)), OMI(16)), _ == logic1_true())

  val Arith_rootTest = _assert("Arith_rootTest", _ => (throw ParseError("""informal term "âˆš 3 27 = 3"""")), _ == logic1_true())

  val Arith_absTest = _assert("Arith_absTest", _ => relation1_eq(arith1_abs(arith1_unary_minus(OMI(2))), OMI(2)), _ == logic1_true())

  val Arith_unary_minusTest = _assert("Arith_unary_minusTest", _ => relation1_eq(arith1_unary_minus(arith1_unary_minus(OMI(2))), OMI(2)), _ == logic1_true())

  val Arith_gcdTest = _assert("Arith_gcdTest", _ => arith1_gcd(List(OMI(12), OMI(18), relation1_eq(OMI(24), OMI(6)))), _ == logic1_true())

  val Arith_lcmTest = _assert("Arith_lcmTest", _ => arith1_lcm(List(OMI(12), OMI(18), relation1_eq(OMI(24), OMI(72)))), _ == logic1_true())

}

object Arith extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "oaff.kwarc.info") / "openmath" / "test")
  val _path = _base ? "Arith"

  object plusTest extends ConstantScala {
    val parent = _path
    val name = "plusTest"
  }


  object minusTest extends ConstantScala {
    val parent = _path
    val name = "minusTest"
  }


  object timesTest extends ConstantScala {
    val parent = _path
    val name = "timesTest"
  }


  object divideTest extends ConstantScala {
    val parent = _path
    val name = "divideTest"
  }


  object powerTest extends ConstantScala {
    val parent = _path
    val name = "powerTest"
  }


  object rootTest extends ConstantScala {
    val parent = _path
    val name = "rootTest"
  }


  object absTest extends ConstantScala {
    val parent = _path
    val name = "absTest"
  }


  object unary_minusTest extends ConstantScala {
    val parent = _path
    val name = "unary_minusTest"
  }


  object gcdTest extends ConstantScala {
    val parent = _path
    val name = "gcdTest"
  }


  object lcmTest extends ConstantScala {
    val parent = _path
    val name = "lcmTest"
  }


}

