//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.test
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait OMList extends TheoryScala with org.openmath.www.cd.arith1 with org.openmath.www.cd.relation1 with org.openmath.www.cd.logic1 with org.openmath.www.cd.list1 with org.openmath.www.cd.list2 {
  val List_in_test = _assert("List_in_test", _ => (throw ParseError("""informal term "member 1 [1,2,3] = true"""")), _ == logic1_true())

  val List_list_selector_test = _assert("List_list_selector_test", _ => relation1_eq(list2_list_selector(OMI(2), list1_list(List(OMI(1), OMI(2), OMI(3)))), OMI(2)), _ == logic1_true())

  val List_first_test = _assert("List_first_test", _ => list2_first(relation1_eq(list1_list(List(OMI(1), OMI(2), OMI(3))), OMI(1))), _ == logic1_true())

  val List_rest_test = _assert("List_rest_test", _ => list2_rest(relation1_eq(list1_list(List(OMI(1), OMI(2), OMI(3))), list1_list(List(OMI(2), OMI(3))))), _ == logic1_true())

  val List_append_test = _assert("List_append_test", _ => list2_append(list1_list(List(OMI(1), OMI(2), OMI(3))), relation1_eq(list1_list(List(OMI(4), OMI(5))), list1_list(List(OMI(1), OMI(2), OMI(3), OMI(4), OMI(5))))), _ == logic1_true())

  val List_cons_test = _assert("List_cons_test", _ => list2_cons(OMI(1), relation1_eq(list1_list(List(OMI(2), OMI(3))), list1_list(List(OMI(1), OMI(2), OMI(3))))), _ == logic1_true())

  val List_reverse_test = _assert("List_reverse_test", _ => list2_reverse(relation1_eq(list1_list(List(OMI(1), OMI(2), OMI(3))), list1_list(List(OMI(3), OMI(2), OMI(1))))), _ == logic1_true())

}

object OMList extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "oaff.kwarc.info") / "openmath" / "test")
  val _path = _base ? "List"

  object in_test extends ConstantScala {
    val parent = _path
    val name = "in_test"
  }


  object list_selector_test extends ConstantScala {
    val parent = _path
    val name = "list_selector_test"
  }


  object first_test extends ConstantScala {
    val parent = _path
    val name = "first_test"
  }


  object rest_test extends ConstantScala {
    val parent = _path
    val name = "rest_test"
  }


  object append_test extends ConstantScala {
    val parent = _path
    val name = "append_test"
  }


  object cons_test extends ConstantScala {
    val parent = _path
    val name = "cons_test"
  }


  object reverse_test extends ConstantScala {
    val parent = _path
    val name = "reverse_test"
  }


}

