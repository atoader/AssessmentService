//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.test
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait OMSet extends TheoryScala with org.openmath.www.cd.arith1 with org.openmath.www.cd.relation1 with org.openmath.www.cd.logic1 with org.openmath.www.cd.set1 {
  val Set_size_test = _assert("Set_size_test", _ => set1_size(relation1_eq(set1_set(List(OMI(1), OMI(2), OMI(3))), OMI(3))), _ == logic1_true())

  val Set_intersect_test = _assert("Set_intersect_test", _ => relation1_eq(set1_intersect(List(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(2), OMI(3), OMI(4), OMI(5))), set1_set(List(OMI(7), OMI(5), OMI(2), OMI(8), OMI(3), OMI(1))))), set1_set(List(OMI(2), OMI(3)))), _ == logic1_true())

  val Set_union_test = _assert("Set_union_test", _ => relation1_eq(set1_union(List(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(2), OMI(3), OMI(4))), set1_set(List(OMI(3), OMI(4), OMI(5))))), set1_set(List(OMI(1), OMI(2), OMI(3), OMI(4), OMI(5)))), _ == logic1_true())

  val Set_setdiff_test1 = _assert("Set_setdiff_test1", _ => relation1_eq(set1_setdiff(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(2), OMI(3), OMI(4)))), set1_set(List(OMI(1)))), _ == logic1_true())

  val Set_setdiff_test2 = _assert("Set_setdiff_test2", _ => relation1_eq(set1_setdiff(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(1), OMI(2), OMI(3), OMI(5)))), set1_emptyset), _ == logic1_true())

  val Set_subset_test1 = _assert("Set_subset_test1", _ => relation1_eq(set1_subset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(3), OMI(1), OMI(2), OMI(4)))), logic1_true), _ == logic1_true())

  val Set_subset_test2 = _assert("Set_subset_test2", _ => relation1_eq(set1_subset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(3), OMI(1), OMI(4)))), logic1_false), _ == logic1_true())

  val Set_prsubset_test1 = _assert("Set_prsubset_test1", _ => relation1_eq(set1_prsubset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(1), OMI(2), OMI(3), OMI(4)))), logic1_true), _ == logic1_true())

  val Set_prsubset_test2 = _assert("Set_prsubset_test2", _ => relation1_eq(set1_prsubset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(1), OMI(2), OMI(3)))), logic1_false), _ == logic1_true())

  val Set_notsubset_test = _assert("Set_notsubset_test", _ => relation1_eq(set1_notsubset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(2), OMI(3), OMI(4)))), logic1_true), _ == logic1_true())

  val Set_notprsubset_test = _assert("Set_notprsubset_test", _ => relation1_eq(set1_notprsubset(set1_set(List(OMI(1), OMI(2), OMI(3))), set1_set(List(OMI(1), OMI(2), OMI(3)))), logic1_true), _ == logic1_true())

  val Set_in_test = _assert("Set_in_test", _ => relation1_eq(set1_in(OMI(1), set1_set(List(OMI(1), OMI(2), OMI(3)))), logic1_true), _ == logic1_true())

  val Set_notin_test = _assert("Set_notin_test", _ => relation1_eq(set1_notin(OMI(1), set1_set(List(OMI(1), OMI(2), OMI(3)))), logic1_false), _ == logic1_true())

}

object OMSet extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "oaff.kwarc.info") / "openmath" / "test")
  val _path = _base ? "Set"

  object size_test extends ConstantScala {
    val parent = _path
    val name = "size_test"
  }


  object intersect_test extends ConstantScala {
    val parent = _path
    val name = "intersect_test"
  }


  object union_test extends ConstantScala {
    val parent = _path
    val name = "union_test"
  }


  object setdiff_test1 extends ConstantScala {
    val parent = _path
    val name = "setdiff_test1"
  }


  object setdiff_test2 extends ConstantScala {
    val parent = _path
    val name = "setdiff_test2"
  }


  object subset_test1 extends ConstantScala {
    val parent = _path
    val name = "subset_test1"
  }


  object subset_test2 extends ConstantScala {
    val parent = _path
    val name = "subset_test2"
  }


  object prsubset_test1 extends ConstantScala {
    val parent = _path
    val name = "prsubset_test1"
  }


  object prsubset_test2 extends ConstantScala {
    val parent = _path
    val name = "prsubset_test2"
  }


  object notsubset_test extends ConstantScala {
    val parent = _path
    val name = "notsubset_test"
  }


  object notprsubset_test extends ConstantScala {
    val parent = _path
    val name = "notprsubset_test"
  }


  object in_test extends ConstantScala {
    val parent = _path
    val name = "in_test"
  }


  object notin_test extends ConstantScala {
    val parent = _path
    val name = "notin_test"
  }


}

