//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.test
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait Complex extends TheoryScala with org.openmath.www.cd.arith1 with org.openmath.www.cd.relation1 with org.openmath.www.cd.logic1 with org.openmath.www.cd.complex1 {
  val Complex_realTest1 = _assert("Complex_realTest1", _ => complex1_real(relation1_eq(complex1_complex_cartesian(OMI(1), OMI(2)), OMI(1))), _ == logic1_true())

  val Complex_imaginaryTest = _assert("Complex_imaginaryTest", _ => complex1_imaginary(relation1_eq(complex1_complex_cartesian(OMI(1), OMI(2)), OMI(2))), _ == logic1_true())

  val Complex_argument = _assert("Complex_argument", _ => complex1_argument(relation1_eq(complex1_complex_polar(OMI(1), OMI(2)), OMI(2))), _ == logic1_true())

  val Complex_conjugate = _assert("Complex_conjugate", _ => complex1_conjugate(relation1_eq(complex1_complex_cartesian(OMI(1), OMI(2)), complex1_complex_cartesian(OMI(1), arith1_unary_minus(OMI(2))))), _ == logic1_true())

}

object Complex extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "oaff.kwarc.info") / "openmath" / "test")
  val _path = _base ? "Complex"

  object realTest1 extends ConstantScala {
    val parent = _path
    val name = "realTest1"
  }


  object imaginaryTest extends ConstantScala {
    val parent = _path
    val name = "imaginaryTest"
  }


  object argument extends ConstantScala {
    val parent = _path
    val name = "argument"
  }


  object conjugate extends ConstantScala {
    val parent = _path
    val name = "conjugate"
  }


}

