//Source file generated by the Universal OpenMath Machine

package info.kwarc.oaff.openmath.test
import info.kwarc.mmt.api._
import objects._
import uom._
import ConstantScala._

trait Logic extends TheoryScala with org.openmath.www.cd.relation1 with org.openmath.www.cd.logic1 {
  val Logic_equivalentTest = _assert("Logic_equivalentTest", _ => logic1_equivalent(logic1_true, logic1_true), _ == logic1_true())

  val Logic_impliesTest = _assert("Logic_impliesTest", _ => logic1_implies(logic1_false, logic1_false), _ == logic1_true())

  val Logic_notTest = _assert("Logic_notTest", _ => logic1_not(relation1_eq(logic1_true, logic1_false)), _ == logic1_true())

  val Logic_andTest = _assert("Logic_andTest", _ => logic1_and(List(logic1_true, relation1_eq(logic1_false, logic1_false))), _ == logic1_true())

  val Logic_orTest = _assert("Logic_orTest", _ => logic1_or(List(logic1_true, relation1_eq(logic1_false, logic1_true))), _ == logic1_true())

  val Logic_xorTest = _assert("Logic_xorTest", _ => logic1_xor(List(logic1_true, relation1_eq(logic1_false, logic1_true))), _ == logic1_true())

}

object Logic extends TheoryScalaAux {
  val _base = DPath(utils.URI("http", "oaff.kwarc.info") / "openmath" / "test")
  val _path = _base ? "Logic"

  object equivalentTest extends ConstantScala {
    val parent = _path
    val name = "equivalentTest"
  }


  object impliesTest extends ConstantScala {
    val parent = _path
    val name = "impliesTest"
  }


  object notTest extends ConstantScala {
    val parent = _path
    val name = "notTest"
  }


  object andTest extends ConstantScala {
    val parent = _path
    val name = "andTest"
  }


  object orTest extends ConstantScala {
    val parent = _path
    val name = "orTest"
  }


  object xorTest extends ConstantScala {
    val parent = _path
    val name = "xorTest"
  }


}

