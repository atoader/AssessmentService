namespace http://oaff.kwarc.info/openmath/uom

view Relation1 : http://www.openmath.org/cd?relation1 -> http://cds.omdoc.org/urtheories?ScalaOM =

  eq = (a: Term, b: Term) scala
  	(a,b) match {
      case (OMI(x1), OMI(x2)) => Utils.ombool(x1 == x2)
      case (OMI(x1), OMF(x2)) => Utils.ombool(x1.toDouble == x2)
      case (OMI(x), nums1.rational(OMI(n), OMI(d))) => Utils.ombool(x * d == n)
      case (OMI(_), complex1.complex_cartesian(re, im)) => Numbers.eqRC(a, b, re, im)
      case (OMF(x1), OMI(x2)) => Utils.ombool(x1 == x2.toDouble)
      case (OMF(x1), OMF(x2)) => Utils.ombool(x1 == x2)
      case (OMF(x), nums1.rational(OMI(n), OMI(d))) => Utils.ombool(x * d.toDouble == n.toDouble)
      case (OMF(_), complex1.complex_cartesian(re, im)) => Numbers.eqRC(a, b, re, im)
      case (nums1.rational(OMI(n), OMI(d)), OMI(x)) => Utils.ombool(x * d == n)
      case (nums1.rational(OMI(n), OMI(d)), OMF(x)) => Utils.ombool(x * d.toDouble == n.toDouble)
      case (nums1.rational(OMI(n1), OMI(d1)), nums1.rational(OMI(n2), OMI(d2))) =>
        Utils.ombool(n1 * d2 == n2 * d1)
      case (nums1.rational(_), complex1.complex_cartesian(re, im)) => Numbers.eqRC(a, b, re, im)
      case (complex1.complex_cartesian(_), OMI(_)) => OMeq(b,a)
      case (complex1.complex_cartesian(_), OMF(_)) => OMeq(b,a)
      case (complex1.complex_cartesian(_), nums1.rational(_)) => OMeq(b,a)
      case (complex1.complex_cartesian(r1, i1), complex1.complex_cartesian(r2, i2)) =>
      	logic1.and(OMeq(r1, r2), OMeq(i1, i2))
      case (set1.set(ls1), set1.set(ls2)) =>
        if (Utils.isFullyKnown(a) && Utils.isFullyKnown(b)) {
          Utils.ombool(ls1.toSet == ls2.toSet)
        } else {
          OMeq(a, b)
        }
      case _ => if (a == b) logic1.`true` else OMeq(a,b)
    }
  		
  	
  
  lt = (a: Term, b: Term) scala
  	Numbers.lessThan(a,b) match {
      case Some(tf) => Utils.ombool(tf)
      case None => lt(a,b)
    }
  	
  
  gt = (a: Term, b: Term) scala
  	lt(b,a)
  	
  
  neq = (a: Term, b: Term) scala
  	logic1.not(OMeq(a,b))
  	
  
  leq = (a: Term, b: Term) scala
  	logic1.or(lt(a,b), OMeq(a,b))
  
  
  geq = (a: Term, b: Term) scala
  	logic1.or(gt(a,b), OMeq(a,b))
  
  
  

